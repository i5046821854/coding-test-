#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;
char arr[2510][2510];
int visit[10] = { 0, };
vector<pair<int, int>>vec;
int num = 0;
int N, M;

bool find(int idx)
{
	int row = vec[idx].first;
	int col = vec[idx].second;
	//printf("%d %d\n", row, col);
	int target, number = 0;
	//int tempRow, tempCol, target;
	int startRow = max(0, row - 9);
	int startCol = max(0, col - 9);
	int endRow = min(N-1, row + 9);
	int endCol = min(M-1, col + 9);
	//printf("%d %d %d %d %d %d\n", row, col, startRow, startCol, endRow, endCol);
	for (int i = startRow; i <= endRow; i++)
	{
		for (int j = startCol; j <= endCol; j++)
		{
			if (arr[i][j] == '1')
			{
				target = max(abs(row - i), abs(col - j));
				//printf("%d\n", target);
				if (visit[target] == 1)
					return false;
				number++;
				visit[target] = 1;
			}
		}
	}
	if (number != 10)
		return false;
	return true;
}

int main(void)
{
	cin >> N >> M;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] == '1')
			{
				num++;
				vec.push_back({ i, j });
			}
		}
	}
	for (int i = 0; i < num; i++)
	{
		if (find(i))
		{
			printf("%d %d", vec[i].first, vec[i].second);
			return 0;
		}
		for (int j = 0; j < 10; j++)
		{
			visit[j] = 0;
		}
	}
	printf("-1");
	return 0;
}
