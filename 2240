#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>

using namespace std;
int dp[1001][2][31] = { 0, };
int arr[1000];
int cnt = 0;


int main(void) {
    int a, b;
    int temp = 1;
    cin >> a >> b;
    for (int i = 0; i < a; i++)
    {
        cin >> arr[i];
    }
    if (arr[0] == 1) {
        dp[0][0][0] = 1;
    }
    else {
        dp[0][1][1] = 1;
    }
    //find(time, dir, cnt);
    for (int i = 1; i < a; i++)
    {
        for (int j = 0; j <= b; j++)
        {
            if (j == 0)
            {
                if (arr[i] - 1 == 0)
                {
                    dp[i][0][j] = dp[i - 1][0][j] + 1;
                    dp[i][1][j] = dp[i - 1][1][j];
                    temp = max(temp, (max(dp[i][0][j], dp[i][1][j])));
                }
                else
                {
                    dp[i][0][j] = dp[i - 1][0][j];
                    dp[i][1][j] = dp[i - 1][1][j] + 1;
                    temp = max(temp, (max(dp[i][0][j], dp[i][1][j])));
                }
            }
            else {
                if (arr[i] - 1 == 0)
                {
                    dp[i][0][j] = max(dp[i - 1][0][j] + 1, dp[i - 1][1][j - 1] + 1);
                    dp[i][1][j] = max(dp[i - 1][0][j - 1], dp[i - 1][1][j]);
                    temp = max(temp, (max(dp[i][0][j], dp[i][1][j])));
                }
                else
                {
                    dp[i][0][j] = max(dp[i - 1][0][j], dp[i - 1][1][j - 1]);
                    dp[i][1][j] = max(dp[i - 1][0][j - 1] + 1, dp[i - 1][1][j] + 1);
                    temp = max(temp, (max(dp[i][0][j], dp[i][1][j])));
                }
            }
        }
    }

   /* for (int i = 0; i < a; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            for (int k = 0; k < b; k++)
            {
                printf("%d ", dp[i][j][k]);
            }
            printf("\n");
        }
        printf("\n\n");
    }*/
    printf("%d", temp);
}
