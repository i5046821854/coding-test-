#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>

using namespace std;
vector<pair<int, int>>vec[810];

int n, m;
int dist[810];

void dikstra(int start) {
	priority_queue<pair<int, int>>pq;
	for (int i = 0; i <= n; i++)
	{
		dist[i] = 987654321;
	}
	dist[start] = 0;
	pq.push({ 0,start });
	while (!pq.empty())
	{
		int cur = pq.top().second;
		int val = pq.top().first * -1;
		pq.pop();
		for (int i = 0; i < vec[cur].size(); i++)
		{
			int to = vec[cur][i].first;
			int weight = vec[cur][i].second;
			if (dist[to] > val + weight)
			{
				dist[to] = val + weight;
				pq.push({dist[to] * -1, to});
			}
		}
	}
}

int main(void) {
	
	

	cin >> n >> m;

	int from, to, weight;
	for (int i = 0; i < m; i++)
	{
		cin >> from >> to >> weight;
		vec[from].push_back({ to, weight });
		vec[to].push_back({ from, weight });
	}
	int v1, v2;
	cin >> v1 >> v2;
	int sToV1, sToV2, V1ToV2, V1ToN, V2ToN;
	dikstra(1);
	sToV1 = dist[v1];
	sToV2 = dist[v2];

	dikstra(v1);
	V1ToV2 = dist[v2];
	V1ToN = dist[n];

	dikstra(v2);
	V2ToN = dist[n];
	int res = 987654321;
	res = min(res, sToV1 + V1ToV2 + V2ToN);
	res = min(res, sToV2 + V1ToV2 + V1ToN);
	if (V1ToV2 == 987654321 || res == 987654321) cout << -1;
	else cout << res;
}
