#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <deque>
#include <string>

using namespace std;

deque<int> deq;

int main(void) {
	int num;
	string cmd;
	int n;
	string arr;
	cin >> num;
	for (int i = 0; i < num; i++)
	{
		bool isReversed = false;
		bool isError = false;
		cin >> cmd;
		cin >> n;
		cin >> arr;
		int prev = 1;
		int cur = 0;
		cur = arr.find(',');
		if (cur != string::npos)
		{
			while (cur != string::npos)
			{
				//printf("%d\n", stoi(arr.substr(prev, cur - prev)));
				deq.push_back(stoi(arr.substr(prev, cur - prev)));
				prev = cur + 1;
				cur = arr.find(',', prev);
			}
			deq.push_back(stoi(arr.substr(prev, cur - prev - 1)));
		}
		else
		{
			cur = arr.find(']');
			if (cur != 1)
			{
				deq.push_back(stoi(arr.substr(prev, cur - prev))); 
			}
		}
		for (int i = 0; i < cmd.size(); i++)
		{
			if (cmd[i] == 'R')
			{
				isReversed = !isReversed;
			}
			else
			{
				if (deq.empty())
				{
					isError = true;
					break;
				}
				if (!isReversed)
				{
					deq.pop_front();
				}
				else
				{
					deq.pop_back();
				}
			}
		}
		if (isError)
		{
			printf("error\n");
		}
		else if (deq.size() == 0)
		{
			printf("[]\n");
		}
		else if( isReversed)
		{
			printf("[");
			while (deq.size() > 1)
			{
				printf("%d,", deq.back());
				deq.pop_back();
			}
			printf("%d]\n", deq.back());
			deq.pop_back();
		}
		else
		{
			printf("[");
			while (deq.size() > 1)
			{
				printf("%d,", deq.front());
				deq.pop_front();
			}
			printf("%d]\n", deq.front());
			deq.pop_front();
		}
	}
	return 0;
}
