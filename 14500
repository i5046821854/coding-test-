#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;
vector<pair<int, int>> chick;
vector<pair<int, int>> city;
vector<pair<int, int>> map;

int arr[500][500];
int dp[500][500];
int visit[500][500] = { 0, };
int n, m;
int ver[4] = { 0,1,0, -1 };
int hor[4] = { 1,0,-1 , 0};
int result = 0;
int fin = 0;
void dfs(int r, int c, int temp, int dep)
{
	visit[r][c] = 1;
	int newr, newc;
	if (dep == 4)
	{
		result = max(temp, result);
		visit[r][c] = 0;
		return;
	}
	for (int i = 0; i < 4; i++)
	{
		newr = r + ver[i];
		newc = c + hor[i];
		if (newr >= n || newr < 0 || newc >= m || newc < 0 || visit[newr][newc] == 1)
			continue;
		dfs(newr, newc, temp + arr[newr][newc], dep + 1);
 	}
	visit[r][c] = 0;
}

int main(void) {
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> arr[i][j];
		}
	}

	for (int i = 0; i < n; i++)
	{
		for(int j = 0; j < m; j++)
		{
			dfs(i, j,arr[i][j], 1);
			dp[i][j] = result;
			result = 0;
			int temp = 0;
			if ((m - j) > 2)
			{
				temp = arr[i][j] + arr[i][j + 1] + arr[i][j + 2];
				if (i == 0)
					temp += arr[i + 1][j + 1];
				else if (i == n - 1)
					temp += arr[i - 1][j + 1];
				else
					temp = temp + max(arr[i - 1][j + 1], arr[i + 1][j + 1]);
			}
			int temp2 = 0;
			if ((n - i) > 2)
			{
				temp2 = arr[i][j] + arr[i+1][j] + arr[i+2][j];
				if (j == 0)
					temp2 += arr[i + 1][j + 1];
				else if (j == m - 1)
					temp2 += arr[i + 1][j - 1];
				else
					temp2 = temp2 + max(arr[i + 1][j - 1], arr[i + 1][j + 1]);
			}
			fin = max(fin, max(dp[i][j], max(temp, temp2)));
		}
	}

	printf("%d", fin);
}
