#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;
queue<pair<pair<int, pair<int, int>>, int>>q;

char arr[1002][1002] = { 0, };
int visit1[1002][1002] = { 0, };
int visit2[1002][1002] = { 0, };


int ver[4] = { -1,0,1,0 };
int hor[4] = { 0,1,0,-1 };

void bfs(int r, int c)
{
	q.push(make_pair(make_pair(1, make_pair(1, 1)), 0));
	while (!q.empty())
	{
		int row = q.front().first.second.first;
		int col = q.front().first.second.second;
		//printf("%d %d %d\n", row-1, col-1, visit[row-1][col-1]);
		if (row == r && col == c)
		{
			printf("%d", q.front().second + 1);
			return;
		}
		for (int i = 0; i < 4; i++)
		{
			int row2 = row + ver[i];
			int col2 = col + hor[i];
			//printf("a");
			if (row2 <= 0 || col2 <= 0 || row2 > r || col2 > c)
			{
				//printf("%d %d %d", row2, col2 ,visit[row2][col2]);
				continue;
			}
			if (arr[row2][col2] == '1')
			{
				if (visit2[row2][col2] == 1)
					continue;
				//printf("c");
				if (q.front().first.first == 1)
				{
						q.push(make_pair(make_pair(0, make_pair(row2, col2)), q.front().second + 1));
						visit2[row2][col2] = 1;
					
				}
			}
			else
			{
				//printf("%d %d\n", row2-1, col2-1);
				if (q.front().first.first == 1)
				{
					if (visit1[row2][col2] == 1)
						continue;
					q.push(make_pair(make_pair(1, make_pair(row2, col2)), q.front().second + 1));
					visit1[row2][col2] = 1;
				}
				else
				{
					if (visit2[row2][col2] == 1)
						continue;
					q.push(make_pair(make_pair(0, make_pair(row2, col2)), q.front().second + 1));
					visit2[row2][col2] = 1;
				}
			}
		}
		q.pop();
	}
	printf("-1");
}

int main(void) {
	int row, col;
	cin >> row >> col;
	for (int i = 1; i <= row; i++)
	{
		for (int j = 1; j <= col; j++)
		{
			cin >> arr[i][j];
		}
	}
	visit1[1][1] = 1;
	bfs(row, col);
	//printf("\n");
	//for (int i = 1; i <= row; i++)
	//{
	//	for (int j = 1; j <= col; j++)
	//	{
	//		printf("%d", visit1[i][j]);
	//	}
	//	printf("\n");
	//}
	return 0;
}
